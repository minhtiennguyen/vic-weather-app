{"version":3,"sources":["config.js","actions/weather.js","constants/actionTypes.js","components/Weather/WeatherItem.js","utils/index.js","components/Weather/MainWeather.js","components/Input/TemparatureInput.js","components/Weather/index.js","components/App/index.js","reducer/weather.js","reducer/index.js","store/index.js","serviceWorker.js","index.js"],"names":["config","apiKey","process","apiUrl","imgUrl","fetchWeatherSuccess","createAction","fetchWeatherFailed","WeatherItem","city","selectCity","isMain","className","onClick","id","name","convertUnixTimestamp","timestamp","d","Date","hours","getHours","slice","minutes","getMinutes","convertTemp","unit","temp","toFixed","MainWeather","src","weather","icon","alt","description","main","today","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","ampm","getCurentTime","temp_min","temp_max","sys","sunrise","sunset","feels_like","humidity","wind","speed","deg","pressure","visibility","TemparatureInput","state","checked","handleChange","event","setState","props","changeUnit","target","value","this","style","textAlign","type","onChange","Component","Weather","fetchWeather","changeTempUnit","cities","isLoaded","hasError","selectedIndex","findIndex","selected","map","key","mapDispatchToProps","cityId","dispatch","url","fetch","then","res","json","result","err","connect","list","App","citiesList","handleFetchWeatherSuccess","action","foundIndex","payload","loaded","initialState","weatherReducer","error","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1bdf6dd7.chunk.js","sourcesContent":["const config = {\n  apiKey: process.env.REACT_APP_WEATHER_API_KEY,\n  apiUrl: 'https://api.openweathermap.org/data/2.5/weather',\n  imgUrl: 'https://openweathermap.org/img/wn'\n}\n\nexport default config;\n","import { FETCH_WEATHER, FETCH_WEATHER_SUCCESS, FETCH_WEATHER_FAILED } from '../constants/actionTypes';\nimport { createAction } from 'redux-actions';\nimport config from '../config';\n\nconst fetchWeatherSuccess = createAction(FETCH_WEATHER_SUCCESS);\nconst fetchWeatherFailed = createAction(FETCH_WEATHER_FAILED);\nconst selectMainCity = createAction('SELECT_MAIN_CITY');\n\nconst fetchWeather = (cityId) => dispatch => {\n  const url = `${config.apiUrl}?id=${cityId}&APPID=${config.apiKey}&units=metric`;\n  dispatch({ type: FETCH_WEATHER });\n  return fetch(url)\n    .then(res => res.json())\n    .then(\n      result => dispatch(fetchWeatherSuccess(result)),\n      err => dispatch(fetchWeatherFailed(err))\n    );\n}\n\nexport { fetchWeather, selectMainCity };\n","export const FETCH_WEATHER = 'FETCH_WEATHER';\nexport const FETCH_WEATHER_SUCCESS = 'FETCH_WEATHER_SUCCESS';\nexport const FETCH_WEATHER_FAILED = 'FETCH_WEATHER_FAILED';\n","import React from 'react';\n\nconst WeatherItem = ({ city, selectCity, isMain }) => {\n  return (\n    <div className={`weather-item ${isMain && 'weather-item--selected'}`} onClick={() => selectCity(city.id)}>\n      <p className='weather-city__name'>{city.name}</p>\n    </div>\n  );\n};\n\nexport default WeatherItem;\n","const convertUnixTimestamp = timestamp => {\n  const d = new Date(timestamp * 1000);\n  const hours = ('0' + d.getHours()).slice(-2);\n  const minutes = ('0' + d.getMinutes()).slice(-2);\n  return `${(hours % 12) ? hours : 12}:${minutes} ${hours > 12 ? 'PM' : 'AM'}`;\n};\n\n// const toCelsius = fahrenheit => {\n//   return ((fahrenheit - 32) * 5) / 9;\n// };\n\nconst toFahrenheit = celsius => {\n  return ((celsius * 9) / 5 + 32).toFixed(2);\n};\n\nconst convertTemp = (unit, temp) => {\n  if (unit === 'imperial') {\n    return `${toFahrenheit(temp)} F`;\n  }\n  return `${temp} C`;\n};\n\nconst getCurentTime = () => {\n  let today = new Date();\n  const dd = String(today.getDate()).padStart(2, '0');\n  const mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n  const yyyy = today.getFullYear();\n  const hours = today.getHours();\n  const ampm = hours >= 12 ? 'PM' : 'AM';\n  const minutes = today.getMinutes();\n\n  return `${dd}/${mm}/${yyyy} - ${hours}:${minutes} ${ampm}`;\n};\n\n\nexport { convertUnixTimestamp, toFahrenheit, convertTemp, getCurentTime };\n","import React from 'react';\nimport config from '../../config';\nimport { convertUnixTimestamp, convertTemp, getCurentTime } from '../../utils';\n\nconst MainWeather = ({ city, unit }) => (\n  <div className='main-city'>\n    <div className='main-city_header'>\n      <h1 className='main-city__name'>{city.name}</h1>\n      <span className='main-city__icon'>\n        <img\n          src={`${config.imgUrl}/${city.weather[0].icon}@2x.png`}\n          alt='weather-icon'\n        />\n      </span>\n      <span className='main-city__desc'>{city.weather[0].description}</span>\n      <span className='main-city__temp'>{convertTemp(unit, city.main.temp)}&deg;</span>\n    </div>\n\n    <div className='main-city__conditions'>\n    <div className='main-city__info main-city__info--no-border'>\n        <div>\n          <span className='heading'>Local Time</span> <br />{' '}\n          {getCurentTime()}\n        </div>\n\n      </div>\n    <div className='main-city__info'>\n        <div>\n          <span className='heading'>Min</span> <br />{' '}\n          {convertTemp(unit, city.main.temp_min)}&deg;\n        </div>\n        <div>\n          <span className='heading'>Max</span> <br />{' '}\n          {convertTemp(unit, city.main.temp_max)}&deg;\n        </div>\n      </div>\n      <div className='main-city__info'>\n        <div>\n          <span className='heading'>Sunrise</span> <br />{' '}\n          {convertUnixTimestamp(city.sys.sunrise)}\n        </div>\n        <div>\n          <span className='heading'>Sunset</span> <br />{' '}\n          {convertUnixTimestamp(city.sys.sunset)}\n        </div>\n      </div>\n      <div className='main-city__info'>\n        <div>\n          <span className='heading'>Feels like</span> <br />{' '}\n          {convertTemp(unit, city.main.feels_like)}&deg;\n        </div>\n        <div>\n          <span className='heading'>Humidity</span> <br /> {city.main.humidity}%\n        </div>\n      </div>\n      <div className='main-city__info'>\n        <div>\n          <span className='heading'>Wind</span> <br /> w {city.wind.speed} km/h\n        </div>\n        <div>\n          <span className='heading'>Wind Direction</span> <br /> {city.wind.deg}\n          &deg;\n        </div>\n      </div>\n      <div className='main-city__info'>\n        <div>\n          <span className='heading'>Pressure</span> <br /> {city.main.pressure}{' '}\n          hPa\n        </div>\n        <div>\n          <span className='heading'>Visibility</span> <br />{' '}\n          {city.visibility / 1000} km\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default MainWeather;\n","import React, { Component } from 'react';\n\nclass TemparatureInput extends Component {\n  state = {\n    checked: false,\n  };\n\n  handleChange = event => {\n    this.setState(state => {\n      return { checked: !state.checked };\n    });\n    this.props.changeUnit(event.target.value);\n  };\n\n  render() {\n    const { checked } = this.state;\n    return (\n        <form style={{ textAlign: \"center\" }}>\n          <label>\n            <input\n              type='radio'\n              name='celsius'\n              onChange={this.handleChange}\n              checked={!checked}\n              value='metric'\n            />\n            C&deg;\n          </label>\n          <label>\n            <input\n              type='radio'\n              name='fahrenheit'\n              onChange={this.handleChange}\n              checked={checked}\n              value='imperial'\n            />\n            F&deg;\n          </label>\n        </form>\n    );\n  }\n}\n\nexport default TemparatureInput;\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\n\nimport { fetchWeather } from '../../actions/weather';\nimport WeatherItem from './WeatherItem';\nimport MainWeather from './MainWeather';\nimport { TemparatureInput } from '../Input';\n\nclass Weather extends Component {\n  state = {\n    city: {\n      id: 2158177,\n    },\n    unit: 'metric',\n  };\n\n  componentDidMount() {\n    const { city } = this.state;\n    this.props.fetchWeather(city.id);\n  }\n\n  selectCity = id => {\n    this.props.fetchWeather(id);\n    this.setState({ city: { id } });\n  };\n\n  changeTempUnit = unit => {\n    this.setState({ unit });\n  };\n\n  render() {\n    const { cities, isLoaded, hasError } = this.props;\n    const { unit } = this.state;\n    const selectedIndex = cities.findIndex(city => city.selected === true);\n    return (\n      <Fragment>\n        {isLoaded ? (\n          <MainWeather city={cities[selectedIndex]} unit={unit} />\n        ) : (\n          <div className='spinner'>loading...</div>\n        )}\n\n        <TemparatureInput changeUnit={this.changeTempUnit} />\n        <div className='cities'>\n          {(cities || []).map(city => (\n            <WeatherItem\n              key={city.id}\n              city={city}\n              selectCity={this.selectCity}\n              isMain={city.id === this.state.city.id}\n            />\n          ))}\n        </div>\n        {hasError && <div className='error'>Something went wrong</div>}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  cities: state.weather.list,\n  isLoaded: state.weather.isLoaded,\n  hasError: state.weather.hasError,\n});\n\nconst mapDispatchToProps = {\n  fetchWeather,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Weather);\n\nexport { WeatherItem, MainWeather, Weather };\n","import React from 'react';\n\nimport Weather from '../Weather';\n\nconst App = () => (\n  <div className='app'>\n    <Weather />\n  </div>\n);\n\nexport default App;\n","import data from '../assets/data.json';\nimport {\n  FETCH_WEATHER,\n  FETCH_WEATHER_FAILED,\n  FETCH_WEATHER_SUCCESS,\n} from '../constants/actionTypes';\n\nconst citiesList = data.map(city => {\n  return { id: city.id, name: city.name, selected: false };\n});\n\nconst handleFetchWeatherSuccess = (state, action) => {\n  const { list } = state;\n  list.map(city => (city.selected = false));\n  const foundIndex = list.findIndex(city => city.id === action.payload.id);\n  list[foundIndex] = action.payload;\n  list[foundIndex].selected = true;\n  list[foundIndex].loaded = true;\n  return {\n    list,\n    isLoaded: true,\n  };\n}\n\nconst initialState = {\n  list: citiesList,\n  isLoaded: false,\n  hasError: false,\n};\n\nconst weatherReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_WEATHER:\n      return {\n        ...state,\n        isLoaded: false,\n        hasError: false,\n      };\n    case FETCH_WEATHER_SUCCESS: return handleFetchWeatherSuccess(state, action);\n    case FETCH_WEATHER_FAILED:\n      return {\n        ...state,\n        isLoaded: true,\n        hasError: true,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default weatherReducer;\n","import { combineReducers } from 'redux';\nimport weatherReducer from './weather';\n\nconst rootReducer = combineReducers({\n  weather: weatherReducer\n});\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducer';\n\nconst store = createStore(rootReducer, composeWithDevTools(\n  applyMiddleware(thunk)\n));\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './components/App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}